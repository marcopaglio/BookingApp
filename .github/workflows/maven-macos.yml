# This workflow will build a Java project with Maven
name: Java CI with Maven in MacOS

on:
  push:

jobs:
  build:
    runs-on: macos-12
    env:
      workdir: booking-aggregator
    
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '11'

    - name: Install X11 dependencies
      run: |
        brew install xinit
        brew install xorg-server
        brew install --cask xquartz
        open -a XQuartz
        defaults write org.macosforge.xquartz.X11.plist nolisten_tcp 0
        ps aux
        killall "XQuartz""
        open -a XQuartz
        sudo launchctl bootstrap unload /System/Library/LaunchDaemons/org.xquartz.privileged_startx.plist
        sudo launchctl bootstrap load /System/Library/LaunchDaemons/org.xquartz.privileged_startx.plist
        ip=$(ifconfig en0 | grep inet | awk '$1=="inet" {print $2}')
        display_number=$(ps -ef | grep "Xquartz :\d" | grep -v xinit | awk '{ print $9; }')
        export DISPLAY=$ip:$display_number
        /opt/X11/bin/xhost +$ip
        
#         brew install xinit
#         brew install xorg-server
#         mkdir /tmp/.X11-unix
#         sudo chmod 1777 /tmp/.X11-unix
#         sudo chown root /tmp/.X11-unix/
#         echo "After mkdir: "
#         ls /tmp/.X11-unix/
#         sudo /usr/local/bin/Xvfb :1 -ac -screen 0 1024x768x24 -displayfd /tmp/.X11-unix/ &
#         echo "After Xvfb: "
#         ls /tmp/.X11-unix/
#         export DISPLAY=:1
#         echo "DISPLAY=$DISPLAY" >> "$GITHUB_ENV"
#
#        brew install xinit
#        brew install xorg-server
#        brew install --cask xquartz
#        echo "After installed XQuartz: "
#        ls /tmp/.X11-unix/
#        open -a XQuartz
#        mkdir /tmp/.X11-unix
#        sudo chmod 1777 /tmp/.X11-unix
#        sudo chown root /tmp/.X11-unix/
#        echo "Before running Xvfb: "
#        ls /tmp/.X11-unix/
#        sudo /usr/local/bin/Xvfb :1 -ac -screen 0 1024x768x24 &
#        echo "After Xvfb: "
#        ls /tmp/.X11-unix/
#        export DISPLAY=:1
#        /usr/X11/bin/xhost +
#        echo "After XHost: "
#        ls /tmp/.X11-unix/
#        echo "DISPLAY=$DISPLAY" >> "$GITHUB_ENV"
#        plutil -p ~/Library/Preferences/com.apple.spaces.plist
#        brew install --cask xquartz
#        sudo shutdown -r now
#        open -a XQuartz
#        plutil -p ~/Library/Preferences/org.macosforge.xquartz.X11.plist
#        ip=$(ifconfig en0 | grep inet | awk '$1=="inet" {print $2}')
#        display_number=$(ps -ef | grep "Xquartz :\d" | grep -v xinit | awk '{ print $9; }')
#        export DISPLAY=$ip:$display_number
#        /opt/X11/bin/xhost +$ip
#        echo "DISPLAY=$DISPLAY" >> "$GITHUB_ENV"

#    - name: Install vncserver
#      run: |
#        brew install xinit
#        brew install xorg-server
#        brew install x11vnc
#        sudo /usr/local/bin/Xvfb :0 &
#        chmod +x ../execute-on-vnc.sh
#        ../execute-on-vnc.sh
#        echo "DISPLAY=$DISPLAY" >> "$GITHUB_ENV"
#      working-directory: ${{ env.workdir }}

    - name: Install Docker
      uses: docker-practice/actions-setup-docker@master

    - name: Cache Maven packages
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml', '**/*.yml') }}
        restore-keys: ${{ runner.os }}-m2-

    - name: Build with Maven Wrapper
      id: maven-build
      run: ../mvnw install -Pdocker
      working-directory: ${{ env.workdir }}
