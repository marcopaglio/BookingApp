<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>io.github.marcopaglio</groupId>
    <artifactId>booking-bom</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <relativePath>../booking-bom</relativePath>
  </parent>
  <artifactId>booking-parent</artifactId>
  <packaging>pom</packaging>
  
  <name>BookingApp - Parent</name>
  <description>
    The Parent project contains all the test dependencies for child modules
    and the common configurations for plugins.
    It defines also the basic structure of profiles.
  </description>
  
  <properties>
    <!-- PROJECT PROPERTIES -->
    <maven.compiler.source>11</maven.compiler.source>
    <maven.compiler.target>11</maven.compiler.target>
    
    <!-- MONGODB PROPERTIES -->
    <mongo.mapped.host>localhost</mongo.mapped.host>
    <mongo.mapped.port>27017</mongo.mapped.port>
    <mongo.replicaSet.name>rsOneNode</mongo.replicaSet.name>
    
    <!-- POSTGRESQL PROPERTIES -->
    <postgres.mapped.host>localhost</postgres.mapped.host>
    <postgres.mapped.port>5432</postgres.mapped.port>
    <postgres.database.name>ITandE2ETest_db</postgres.database.name>
    <postgres.database.user>postgres-it-e2e</postgres.database.user>
    <postgres.database.pswd>postgres-it-e2e</postgres.database.pswd>

    <!-- VERSIONS FOR DEPENDENCIES -->
    <junit.version>5.9.2</junit.version>
    <assertj.version>3.24.2</assertj.version>
    <assertj.swing.version>3.17.1</assertj.swing.version>
    <mockito.version>5.1.1</mockito.version>
    <testcontainers.version>1.18.3</testcontainers.version>
    <logback.version>1.2.12</logback.version>
    <postgresql.version>42.6.0</postgresql.version>
    <awaitility.version>4.2.0</awaitility.version>


    <!-- VERSIONS FOR ADDED MAVEN PLUGINS -->
    <maven.compiler.version>3.11.0</maven.compiler.version>
    <maven.resources.version>3.3.0</maven.resources.version>
    <maven.jar.version>3.3.0</maven.jar.version>

    <!-- VERSIONS FOR OTHER PLUGINS -->
    <jacoco.version>0.8.8</jacoco.version>
    <coveralls.version>4.3.0</coveralls.version>
    <jaxb.api.version>2.3.1</jaxb.api.version>
    <pitest.version>1.11.4</pitest.version>
    <pitest.junit5.version>1.1.2</pitest.junit5.version>
    <sonar.version>3.9.1.2184</sonar.version>
    <build.helper.version>3.4.0</build.helper.version>
    <docker.version>0.43.4</docker.version>
  </properties>
  
  <dependencyManagement>
    <dependencies>
      <dependency>
        <groupId>org.hibernate.orm</groupId>
        <artifactId>hibernate-hikaricp</artifactId>
        <version>${hibernate.version}</version>
        <!-- version defined in the bom -->
      </dependency>
      <dependency>
        <groupId>org.postgresql</groupId>
        <artifactId>postgresql</artifactId>
        <version>${postgresql.version}</version>
      </dependency>
      <dependency>
        <!-- required to see Testcontainers logs -->
        <!-- required to see Mongo Java Driver logs -->
        <groupId>ch.qos.logback</groupId>
        <artifactId>logback-classic</artifactId>
        <version>${logback.version}</version>
      </dependency>

      <dependency>
        <groupId>org.junit</groupId>
        <artifactId>junit-bom</artifactId>
        <version>${junit.version}</version>
        <scope>import</scope>
        <type>pom</type>
      </dependency>
      <dependency>
        <groupId>org.assertj</groupId>
        <artifactId>assertj-bom</artifactId>
        <version>${assertj.version}</version>
        <scope>import</scope>
        <type>pom</type>
      </dependency>
      <dependency>
        <groupId>org.mockito</groupId>
        <artifactId>mockito-bom</artifactId>
        <version>${mockito.version}</version>
        <scope>import</scope>
        <type>pom</type>
      </dependency>
      <dependency>
        <groupId>org.assertj</groupId>
        <artifactId>assertj-swing-junit</artifactId>
        <version>${assertj.swing.version}</version>
      </dependency>
      <dependency>
        <groupId>org.testcontainers</groupId>
        <artifactId>testcontainers-bom</artifactId>
        <version>${testcontainers.version}</version>
        <scope>import</scope>
        <type>pom</type>
      </dependency>
      <dependency>
        <groupId>org.awaitility</groupId>
        <artifactId>awaitility</artifactId>
        <version>${awaitility.version}</version>
      </dependency>
    </dependencies>
  </dependencyManagement>
  
  <build>
    <pluginManagement>
      <plugins>
        <!-- DEFAULT MAVEN PLUGINS -->
        <plugin>
          <artifactId>maven-dependency-plugin</artifactId>
          <!-- version taken from the bom -->
          <executions>
            <execution>
              <id>copy-dependencies</id>
              <phase>process-sources</phase>
              <goals>
                <goal>copy-dependencies</goal>
              </goals>
            </execution>
          </executions>
        </plugin>

        <!-- ADDED MAVEN PLUGINS -->
        <plugin>
          <artifactId>maven-compiler-plugin</artifactId>
          <version>${maven.compiler.version}</version>
        </plugin>
        <plugin>
          <artifactId>maven-resources-plugin</artifactId>
          <version>${maven.resources.version}</version>
        </plugin>
        <plugin>
          <artifactId>maven-jar-plugin</artifactId>
          <version>${maven.jar.version}</version>
        </plugin>
        <plugin>
          <artifactId>maven-failsafe-plugin</artifactId>
          <!-- version taken from the bom -->
          <configuration>
            <systemPropertyVariables>
              <mongo.host>${mongo.mapped.host}</mongo.host>
              <mongo.port>${mongo.mapped.port}</mongo.port>
              
              <postgres.host>${postgres.mapped.host}</postgres.host>
              <postgres.port>${postgres.mapped.port}</postgres.port>
              <postgres.name>${postgres.database.name}</postgres.name>
              <postgres.user>${postgres.database.user}</postgres.user>
              <postgres.pswd>${postgres.database.pswd}</postgres.pswd>
            </systemPropertyVariables>
          </configuration>
          <executions>
            <execution>
              <id>default-it</id>
              <goals>
                <goal>integration-test</goal>
                <goal>verify</goal>
              </goals>
            </execution>
            <execution>
              <id>e2e-tests</id>
              <goals>
                <goal>integration-test</goal>
                <goal>verify</goal>
              </goals>
              <configuration>
                <excludes>
                  <exclude>**/*IT.java</exclude>
                </excludes>
                <includes>
                  <include>**/*E2E.java</include>
                </includes>
              </configuration>
            </execution>
          </executions>
        </plugin>

        <!-- OTHER PLUGINS -->
        <plugin>
          <groupId>org.jacoco</groupId>
          <artifactId>jacoco-maven-plugin</artifactId>
          <version>${jacoco.version}</version>
          <executions>
            <execution>
              <goals>
                <!-- binds by default to the phase "initialize" -->
                <goal>prepare-agent</goal>
                <!-- binds by default to the phase "verify" -->
                <goal>report</goal>
              </goals>
            </execution>
          </executions>
        </plugin>
        <plugin>
          <groupId>org.eluder.coveralls</groupId>
          <artifactId>coveralls-maven-plugin</artifactId>
          <version>${coveralls.version}</version>
          <dependencies>
            <!-- This is required when using JDK 9 or higher
            since javax.xml.bind has been removed from the JDK -->
            <dependency>
              <groupId>javax.xml.bind</groupId>
              <artifactId>jaxb-api</artifactId>
              <version>${jaxb.api.version}</version>
            </dependency>
          </dependencies>
        </plugin>
        <plugin>
          <groupId>org.pitest</groupId>
          <artifactId>pitest-maven</artifactId>
          <version>${pitest.version}</version>
          <dependencies>
            <dependency>
              <groupId>org.pitest</groupId>
              <artifactId>pitest-junit5-plugin</artifactId>
              <version>${pitest.junit5.version}</version>
            </dependency>
          </dependencies>
          <executions>
            <execution>
              <goals>
                <goal>mutationCoverage</goal>
              </goals>
              <phase>verify</phase>
            </execution>
          </executions>
          <configuration>
            <mutators>
              <mutator>DEFAULTS</mutator>
            </mutators>
            <mutationThreshold>100</mutationThreshold>
            <timeoutConstant>5000</timeoutConstant>
            <avoidCallsTo>
              <avoidCallsTo>org.apache.logging.log4j</avoidCallsTo>
            </avoidCallsTo>
            <excludedTestClasses>
              <excludedTestClass>**.*IT</excludedTestClass>
              <excludedTestClass>**.*E2E</excludedTestClass>
            </excludedTestClasses>
            <exportLineCoverage>true</exportLineCoverage>
            <outputFormats>
              <outputFormat>HTML</outputFormat>
              <outputFormat>XML</outputFormat>
            </outputFormats>
          </configuration>
        </plugin>
        <plugin>
          <groupId>org.sonarsource.scanner.maven</groupId>
          <artifactId>sonar-maven-plugin</artifactId>
          <version>${sonar.version}</version>
          <!-- ONLY FOR LOCAL QUALITY CHECKS -->
          <executions>
            <execution>
               <id>sonar</id>
              <phase>verify</phase>
              <goals>
                <goal>sonar</goal>
              </goals>
            </execution>
          </executions>
        </plugin>
        <plugin>
          <groupId>org.codehaus.mojo</groupId>
          <artifactId>build-helper-maven-plugin</artifactId>
          <version>${build.helper.version}</version>
          <executions>
            <execution>
              <id>add-test-source</id>
              <phase>generate-test-sources</phase>
              <goals>
                <goal>add-test-source</goal>
              </goals>
              <configuration>
                <sources>
                  <source>src/it/java</source>
                  <source>src/e2e/java</source>
                </sources>
              </configuration>
            </execution>
          </executions>
        </plugin>
        <plugin>
          <groupId>io.fabric8</groupId>
          <artifactId>docker-maven-plugin</artifactId>
          <version>${docker.version}</version>
          <configuration>
            <containerNamePattern>%a</containerNamePattern> <!-- %a = <alias>'s value-->
            <images>
              <image>
                <name>mongo:6.0.7</name>
                <alias>mongo</alias>
                <run>
                  <ports>
                    <port>mongo.mapped.port:27017</port>
                  </ports>
                  <cmd>mongod --replSet ${mongo.replicaSet.name}</cmd>
                  <wait>
                    <http>
                      <url>http://${mongo.mapped.host}:${mongo.mapped.port}</url>
                      <method>GET</method>
                      <status>200</status>
                    </http>
                    <time>10000</time>
                    <exec>
                      <postStart>mongosh --eval "rs.initiate();"</postStart>
                    </exec>
                  </wait>
                </run>
              </image>
              <image>
                <name>postgres:15.3</name>
                <alias>postgres</alias>
                <run>
                  <ports>
                    <port>postgres.mapped.port:5432</port>
                  </ports>
                  <env>
                    <POSTGRES_DB>${postgres.database.name}</POSTGRES_DB>
                    <POSTGRES_USER>${postgres.database.user}</POSTGRES_USER>
                    <POSTGRES_PASSWORD>${postgres.database.pswd}</POSTGRES_PASSWORD>
                  </env>
                  <wait>
                    <log>\[1\] LOG:  database system is ready to accept connections</log>
                    <time>20000</time>
                  </wait>
                  <!-- real value of concorrent connection with HikariCP seems to be: -->
                  <!-- ceil(postgres_max_connection / 10) -->
                  <cmd>postgres -c max_connections=221</cmd>
                </run>
              </image>
            </images>
          </configuration>
          <executions>
            <execution>
              <id>docker-start</id>
              <phase>pre-integration-test</phase>
              <goals>
                <goal>start</goal>
              </goals>
            </execution>
            <execution>
              <id>docker-stop</id>
              <phase>post-integration-test</phase>
              <goals>
                <goal>stop</goal>
              </goals>
            </execution>
          </executions>
        </plugin>
      </plugins>
    </pluginManagement>
  </build>
  
  <profiles>
    <profile>
      <id>jacoco</id>
      <build>
        <plugins>
          <plugin>
            <!-- main configuration in pluginManagement -->
            <groupId>org.jacoco</groupId>
            <artifactId>jacoco-maven-plugin</artifactId>
          </plugin>
        </plugins>
      </build>
    </profile>

    <profile>
      <id>coveralls</id>
      <build>
        <plugins>
          <plugin>
            <!-- main configuration in pluginManagement -->
            <!-- JaCoCo report is required by coveralls-maven-plugin -->
            <groupId>org.jacoco</groupId>
            <artifactId>jacoco-maven-plugin</artifactId>
          </plugin>
          <plugin>
            <!-- main configuration in pluginManagement -->
            <groupId>org.eluder.coveralls</groupId>
            <artifactId>coveralls-maven-plugin</artifactId>
          </plugin>
        </plugins>
      </build>
    </profile>

    <profile>
      <id>pitest</id>
      <build>
        <plugins>
          <plugin>
            <!-- main configuration in pluginManagement -->
            <groupId>org.pitest</groupId>
            <artifactId>pitest-maven</artifactId>
          </plugin>
        </plugins>
      </build>
    </profile>

    <profile>
      <id>sonar</id>
      <properties>
        <sonar.junit.reportPaths>
          ${project.build.directory}/surefire-reports,
          ${project.build.directory}/failsafe-reports
        </sonar.junit.reportPaths>
        <sonar.coverage.jacoco.xmlReportPaths>
          ${project.build.directory}/site/jacoco/jacoco.xml
        </sonar.coverage.jacoco.xmlReportPaths>
        <sonar.java.libraries>
          ${project.build.directory}/dependency
        </sonar.java.libraries>
      </properties>
      <build>
        <plugins>
          <plugin>
            <!-- main configuration in pluginManagement -->
            <!-- To fix following WARNING: -->
            <!-- Bytecode of dependencies was not provided for analysis of source files,
            you might end up with less precise results. -->
            <artifactId>maven-dependency-plugin</artifactId>
          </plugin>
          <plugin>
            <!-- main configuration in pluginManagement -->
            <groupId>org.jacoco</groupId>
            <artifactId>jacoco-maven-plugin</artifactId>
          </plugin>
          <plugin>
            <!-- main configuration in pluginManagement -->
            <groupId>org.sonarsource.scanner.maven</groupId>
            <artifactId>sonar-maven-plugin</artifactId>
          </plugin>
        </plugins>
      </build>
    </profile>
  </profiles>
</project>